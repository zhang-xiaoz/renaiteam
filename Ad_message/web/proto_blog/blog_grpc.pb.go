// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto_blog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogsClient is the client API for Blogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogsClient interface {
	Add_Blog_Message_MysqlBlog(ctx context.Context, in *BlogBlog, opts ...grpc.CallOption) (*BACKBlog, error)
	Revise_Blog_Process_MysqlBlog(ctx context.Context, in *BlogProcessBlog, opts ...grpc.CallOption) (*BACKBlog, error)
	Check_Blog_Uuid_MysqlBlog(ctx context.Context, in *BlogProcessBlog, opts ...grpc.CallOption) (*BACKBlog, error)
	Get_Blog_Message_Elastic_TopBlog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlogloadingBlog, error)
	Check_Blog_Uuid_Elastic_Blog(ctx context.Context, in *BlogloadingBlog, opts ...grpc.CallOption) (*BACKBlog, error)
	Get_Blog_Message_ArticleUuid(ctx context.Context, in *Blog_ArticleUuid, opts ...grpc.CallOption) (*Blog_Elastic_Message_TopBlog, error)
	Get_Blog_Message_Elastic_Lower(ctx context.Context, in *BlogloadingBlog, opts ...grpc.CallOption) (*Blog_Elastic_Message_TopBlogs, error)
	Add_Blog_Reading_Volume(ctx context.Context, in *Blog_ArticleUuid, opts ...grpc.CallOption) (*BACKBlog, error)
	Get_Blog_Mysql_Message(ctx context.Context, in *Blog_ArticleUuid, opts ...grpc.CallOption) (*BlogBlog, error)
	Search_Blog_ElasticBlog(ctx context.Context, in *AAAAA, opts ...grpc.CallOption) (*Blog_Elastic_Message_SerachBlogs, error)
	Save_Redis_StorageBlog(ctx context.Context, in *Redis_Storage_Blog, opts ...grpc.CallOption) (*Redis_Back_Picture, error)
	Delete_El6_MysqlBlog(ctx context.Context, in *Redis_Storage_Blog, opts ...grpc.CallOption) (*BACKBlog, error)
	Completely_El6_MysqlBlog(ctx context.Context, in *Blog_ArticleUuid, opts ...grpc.CallOption) (*BACKBlog, error)
	Get_Delete_Blog_Mysql(ctx context.Context, in *AAAA, opts ...grpc.CallOption) (*Blog_Elastic_Message_SerachBlogs, error)
	Revise_Blog_Process_PlusBlog(ctx context.Context, in *BlogProcessPlusBlog, opts ...grpc.CallOption) (*BACKBlog, error)
	Add_Mysql_Blog_Collection(ctx context.Context, in *Blog_UserUuid, opts ...grpc.CallOption) (*BACKBlog, error)
	Delete_Mysql_Blog_Collection(ctx context.Context, in *Blog_UserUuid, opts ...grpc.CallOption) (*BACKBlog, error)
	Get_Mysql_Blog_Collection(ctx context.Context, in *UserUuid_Blog, opts ...grpc.CallOption) (*Blog_Elastic_Message_CollectionBlogs, error)
	Revise_Blog_Elastic_Mysql(ctx context.Context, in *BlogBlog, opts ...grpc.CallOption) (*BACKBlog, error)
	Search_Blog_Label_Elastic(ctx context.Context, in *AAAAA, opts ...grpc.CallOption) (*Blog_Elastic_Message_SerachBlogs, error)
	Get_Blog_Collection_Status(ctx context.Context, in *Blog_UserUuid, opts ...grpc.CallOption) (*Status, error)
	Get_Blog_Manage_All(ctx context.Context, in *Blog_Page, opts ...grpc.CallOption) (*Blog_Message, error)
	Delete_El6_Mysql_Process(ctx context.Context, in *BlogProcessBlog, opts ...grpc.CallOption) (*BACKBlog, error)
	Get_Blog_Manage_Name(ctx context.Context, in *Blog_Page, opts ...grpc.CallOption) (*Blog_Message, error)
	Get_Blog_Manage_Title(ctx context.Context, in *Blog_Page, opts ...grpc.CallOption) (*Blog_Message, error)
	Get_Blog_Manage_Label(ctx context.Context, in *Blog_Page, opts ...grpc.CallOption) (*Blog_Message, error)
}

type blogsClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogsClient(cc grpc.ClientConnInterface) BlogsClient {
	return &blogsClient{cc}
}

func (c *blogsClient) Add_Blog_Message_MysqlBlog(ctx context.Context, in *BlogBlog, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Add_Blog_Message_Mysql_blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Revise_Blog_Process_MysqlBlog(ctx context.Context, in *BlogProcessBlog, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Revise_Blog_Process_Mysql_blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Check_Blog_Uuid_MysqlBlog(ctx context.Context, in *BlogProcessBlog, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Check_Blog_Uuid_Mysql_blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Blog_Message_Elastic_TopBlog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlogloadingBlog, error) {
	out := new(BlogloadingBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Blog_Message_Elastic_Top_blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Check_Blog_Uuid_Elastic_Blog(ctx context.Context, in *BlogloadingBlog, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Check_Blog_Uuid_Elastic_Blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Blog_Message_ArticleUuid(ctx context.Context, in *Blog_ArticleUuid, opts ...grpc.CallOption) (*Blog_Elastic_Message_TopBlog, error) {
	out := new(Blog_Elastic_Message_TopBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Blog_Message_ArticleUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Blog_Message_Elastic_Lower(ctx context.Context, in *BlogloadingBlog, opts ...grpc.CallOption) (*Blog_Elastic_Message_TopBlogs, error) {
	out := new(Blog_Elastic_Message_TopBlogs)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Blog_Message_Elastic_Lower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Add_Blog_Reading_Volume(ctx context.Context, in *Blog_ArticleUuid, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Add_Blog_Reading_Volume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Blog_Mysql_Message(ctx context.Context, in *Blog_ArticleUuid, opts ...grpc.CallOption) (*BlogBlog, error) {
	out := new(BlogBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Blog_Mysql_Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Search_Blog_ElasticBlog(ctx context.Context, in *AAAAA, opts ...grpc.CallOption) (*Blog_Elastic_Message_SerachBlogs, error) {
	out := new(Blog_Elastic_Message_SerachBlogs)
	err := c.cc.Invoke(ctx, "/Blogs/Search_Blog_Elastic_blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Save_Redis_StorageBlog(ctx context.Context, in *Redis_Storage_Blog, opts ...grpc.CallOption) (*Redis_Back_Picture, error) {
	out := new(Redis_Back_Picture)
	err := c.cc.Invoke(ctx, "/Blogs/Save_Redis_Storage_blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Delete_El6_MysqlBlog(ctx context.Context, in *Redis_Storage_Blog, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Delete_El6_Mysql_blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Completely_El6_MysqlBlog(ctx context.Context, in *Blog_ArticleUuid, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Completely_El6_Mysql_blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Delete_Blog_Mysql(ctx context.Context, in *AAAA, opts ...grpc.CallOption) (*Blog_Elastic_Message_SerachBlogs, error) {
	out := new(Blog_Elastic_Message_SerachBlogs)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Delete_Blog_Mysql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Revise_Blog_Process_PlusBlog(ctx context.Context, in *BlogProcessPlusBlog, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Revise_Blog_Process_Plus_blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Add_Mysql_Blog_Collection(ctx context.Context, in *Blog_UserUuid, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Add_Mysql_Blog_Collection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Delete_Mysql_Blog_Collection(ctx context.Context, in *Blog_UserUuid, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Delete_Mysql_Blog_Collection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Mysql_Blog_Collection(ctx context.Context, in *UserUuid_Blog, opts ...grpc.CallOption) (*Blog_Elastic_Message_CollectionBlogs, error) {
	out := new(Blog_Elastic_Message_CollectionBlogs)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Mysql_Blog_Collection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Revise_Blog_Elastic_Mysql(ctx context.Context, in *BlogBlog, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Revise_Blog_Elastic_Mysql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Search_Blog_Label_Elastic(ctx context.Context, in *AAAAA, opts ...grpc.CallOption) (*Blog_Elastic_Message_SerachBlogs, error) {
	out := new(Blog_Elastic_Message_SerachBlogs)
	err := c.cc.Invoke(ctx, "/Blogs/Search_Blog_Label_Elastic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Blog_Collection_Status(ctx context.Context, in *Blog_UserUuid, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Blog_Collection_Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Blog_Manage_All(ctx context.Context, in *Blog_Page, opts ...grpc.CallOption) (*Blog_Message, error) {
	out := new(Blog_Message)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Blog_Manage_All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Delete_El6_Mysql_Process(ctx context.Context, in *BlogProcessBlog, opts ...grpc.CallOption) (*BACKBlog, error) {
	out := new(BACKBlog)
	err := c.cc.Invoke(ctx, "/Blogs/Delete_El6_Mysql_Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Blog_Manage_Name(ctx context.Context, in *Blog_Page, opts ...grpc.CallOption) (*Blog_Message, error) {
	out := new(Blog_Message)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Blog_Manage_Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Blog_Manage_Title(ctx context.Context, in *Blog_Page, opts ...grpc.CallOption) (*Blog_Message, error) {
	out := new(Blog_Message)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Blog_Manage_Title", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get_Blog_Manage_Label(ctx context.Context, in *Blog_Page, opts ...grpc.CallOption) (*Blog_Message, error) {
	out := new(Blog_Message)
	err := c.cc.Invoke(ctx, "/Blogs/Get_Blog_Manage_Label", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogsServer is the server API for Blogs service.
// All implementations must embed UnimplementedBlogsServer
// for forward compatibility
type BlogsServer interface {
	Add_Blog_Message_MysqlBlog(context.Context, *BlogBlog) (*BACKBlog, error)
	Revise_Blog_Process_MysqlBlog(context.Context, *BlogProcessBlog) (*BACKBlog, error)
	Check_Blog_Uuid_MysqlBlog(context.Context, *BlogProcessBlog) (*BACKBlog, error)
	Get_Blog_Message_Elastic_TopBlog(context.Context, *emptypb.Empty) (*BlogloadingBlog, error)
	Check_Blog_Uuid_Elastic_Blog(context.Context, *BlogloadingBlog) (*BACKBlog, error)
	Get_Blog_Message_ArticleUuid(context.Context, *Blog_ArticleUuid) (*Blog_Elastic_Message_TopBlog, error)
	Get_Blog_Message_Elastic_Lower(context.Context, *BlogloadingBlog) (*Blog_Elastic_Message_TopBlogs, error)
	Add_Blog_Reading_Volume(context.Context, *Blog_ArticleUuid) (*BACKBlog, error)
	Get_Blog_Mysql_Message(context.Context, *Blog_ArticleUuid) (*BlogBlog, error)
	Search_Blog_ElasticBlog(context.Context, *AAAAA) (*Blog_Elastic_Message_SerachBlogs, error)
	Save_Redis_StorageBlog(context.Context, *Redis_Storage_Blog) (*Redis_Back_Picture, error)
	Delete_El6_MysqlBlog(context.Context, *Redis_Storage_Blog) (*BACKBlog, error)
	Completely_El6_MysqlBlog(context.Context, *Blog_ArticleUuid) (*BACKBlog, error)
	Get_Delete_Blog_Mysql(context.Context, *AAAA) (*Blog_Elastic_Message_SerachBlogs, error)
	Revise_Blog_Process_PlusBlog(context.Context, *BlogProcessPlusBlog) (*BACKBlog, error)
	Add_Mysql_Blog_Collection(context.Context, *Blog_UserUuid) (*BACKBlog, error)
	Delete_Mysql_Blog_Collection(context.Context, *Blog_UserUuid) (*BACKBlog, error)
	Get_Mysql_Blog_Collection(context.Context, *UserUuid_Blog) (*Blog_Elastic_Message_CollectionBlogs, error)
	Revise_Blog_Elastic_Mysql(context.Context, *BlogBlog) (*BACKBlog, error)
	Search_Blog_Label_Elastic(context.Context, *AAAAA) (*Blog_Elastic_Message_SerachBlogs, error)
	Get_Blog_Collection_Status(context.Context, *Blog_UserUuid) (*Status, error)
	Get_Blog_Manage_All(context.Context, *Blog_Page) (*Blog_Message, error)
	Delete_El6_Mysql_Process(context.Context, *BlogProcessBlog) (*BACKBlog, error)
	Get_Blog_Manage_Name(context.Context, *Blog_Page) (*Blog_Message, error)
	Get_Blog_Manage_Title(context.Context, *Blog_Page) (*Blog_Message, error)
	Get_Blog_Manage_Label(context.Context, *Blog_Page) (*Blog_Message, error)
	mustEmbedUnimplementedBlogsServer()
}

// UnimplementedBlogsServer must be embedded to have forward compatible implementations.
type UnimplementedBlogsServer struct {
}

func (UnimplementedBlogsServer) Add_Blog_Message_MysqlBlog(context.Context, *BlogBlog) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add_Blog_Message_MysqlBlog not implemented")
}
func (UnimplementedBlogsServer) Revise_Blog_Process_MysqlBlog(context.Context, *BlogProcessBlog) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_Blog_Process_MysqlBlog not implemented")
}
func (UnimplementedBlogsServer) Check_Blog_Uuid_MysqlBlog(context.Context, *BlogProcessBlog) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check_Blog_Uuid_MysqlBlog not implemented")
}
func (UnimplementedBlogsServer) Get_Blog_Message_Elastic_TopBlog(context.Context, *emptypb.Empty) (*BlogloadingBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blog_Message_Elastic_TopBlog not implemented")
}
func (UnimplementedBlogsServer) Check_Blog_Uuid_Elastic_Blog(context.Context, *BlogloadingBlog) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check_Blog_Uuid_Elastic_Blog not implemented")
}
func (UnimplementedBlogsServer) Get_Blog_Message_ArticleUuid(context.Context, *Blog_ArticleUuid) (*Blog_Elastic_Message_TopBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blog_Message_ArticleUuid not implemented")
}
func (UnimplementedBlogsServer) Get_Blog_Message_Elastic_Lower(context.Context, *BlogloadingBlog) (*Blog_Elastic_Message_TopBlogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blog_Message_Elastic_Lower not implemented")
}
func (UnimplementedBlogsServer) Add_Blog_Reading_Volume(context.Context, *Blog_ArticleUuid) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add_Blog_Reading_Volume not implemented")
}
func (UnimplementedBlogsServer) Get_Blog_Mysql_Message(context.Context, *Blog_ArticleUuid) (*BlogBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blog_Mysql_Message not implemented")
}
func (UnimplementedBlogsServer) Search_Blog_ElasticBlog(context.Context, *AAAAA) (*Blog_Elastic_Message_SerachBlogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search_Blog_ElasticBlog not implemented")
}
func (UnimplementedBlogsServer) Save_Redis_StorageBlog(context.Context, *Redis_Storage_Blog) (*Redis_Back_Picture, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save_Redis_StorageBlog not implemented")
}
func (UnimplementedBlogsServer) Delete_El6_MysqlBlog(context.Context, *Redis_Storage_Blog) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete_El6_MysqlBlog not implemented")
}
func (UnimplementedBlogsServer) Completely_El6_MysqlBlog(context.Context, *Blog_ArticleUuid) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Completely_El6_MysqlBlog not implemented")
}
func (UnimplementedBlogsServer) Get_Delete_Blog_Mysql(context.Context, *AAAA) (*Blog_Elastic_Message_SerachBlogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Delete_Blog_Mysql not implemented")
}
func (UnimplementedBlogsServer) Revise_Blog_Process_PlusBlog(context.Context, *BlogProcessPlusBlog) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_Blog_Process_PlusBlog not implemented")
}
func (UnimplementedBlogsServer) Add_Mysql_Blog_Collection(context.Context, *Blog_UserUuid) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add_Mysql_Blog_Collection not implemented")
}
func (UnimplementedBlogsServer) Delete_Mysql_Blog_Collection(context.Context, *Blog_UserUuid) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete_Mysql_Blog_Collection not implemented")
}
func (UnimplementedBlogsServer) Get_Mysql_Blog_Collection(context.Context, *UserUuid_Blog) (*Blog_Elastic_Message_CollectionBlogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Mysql_Blog_Collection not implemented")
}
func (UnimplementedBlogsServer) Revise_Blog_Elastic_Mysql(context.Context, *BlogBlog) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_Blog_Elastic_Mysql not implemented")
}
func (UnimplementedBlogsServer) Search_Blog_Label_Elastic(context.Context, *AAAAA) (*Blog_Elastic_Message_SerachBlogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search_Blog_Label_Elastic not implemented")
}
func (UnimplementedBlogsServer) Get_Blog_Collection_Status(context.Context, *Blog_UserUuid) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blog_Collection_Status not implemented")
}
func (UnimplementedBlogsServer) Get_Blog_Manage_All(context.Context, *Blog_Page) (*Blog_Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blog_Manage_All not implemented")
}
func (UnimplementedBlogsServer) Delete_El6_Mysql_Process(context.Context, *BlogProcessBlog) (*BACKBlog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete_El6_Mysql_Process not implemented")
}
func (UnimplementedBlogsServer) Get_Blog_Manage_Name(context.Context, *Blog_Page) (*Blog_Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blog_Manage_Name not implemented")
}
func (UnimplementedBlogsServer) Get_Blog_Manage_Title(context.Context, *Blog_Page) (*Blog_Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blog_Manage_Title not implemented")
}
func (UnimplementedBlogsServer) Get_Blog_Manage_Label(context.Context, *Blog_Page) (*Blog_Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blog_Manage_Label not implemented")
}
func (UnimplementedBlogsServer) mustEmbedUnimplementedBlogsServer() {}

// UnsafeBlogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogsServer will
// result in compilation errors.
type UnsafeBlogsServer interface {
	mustEmbedUnimplementedBlogsServer()
}

func RegisterBlogsServer(s grpc.ServiceRegistrar, srv BlogsServer) {
	s.RegisterService(&Blogs_ServiceDesc, srv)
}

func _Blogs_Add_Blog_Message_MysqlBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogBlog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Add_Blog_Message_MysqlBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Add_Blog_Message_Mysql_blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Add_Blog_Message_MysqlBlog(ctx, req.(*BlogBlog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Revise_Blog_Process_MysqlBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogProcessBlog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Revise_Blog_Process_MysqlBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Revise_Blog_Process_Mysql_blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Revise_Blog_Process_MysqlBlog(ctx, req.(*BlogProcessBlog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Check_Blog_Uuid_MysqlBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogProcessBlog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Check_Blog_Uuid_MysqlBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Check_Blog_Uuid_Mysql_blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Check_Blog_Uuid_MysqlBlog(ctx, req.(*BlogProcessBlog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Blog_Message_Elastic_TopBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Blog_Message_Elastic_TopBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Blog_Message_Elastic_Top_blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Blog_Message_Elastic_TopBlog(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Check_Blog_Uuid_Elastic_Blog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogloadingBlog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Check_Blog_Uuid_Elastic_Blog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Check_Blog_Uuid_Elastic_Blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Check_Blog_Uuid_Elastic_Blog(ctx, req.(*BlogloadingBlog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Blog_Message_ArticleUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_ArticleUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Blog_Message_ArticleUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Blog_Message_ArticleUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Blog_Message_ArticleUuid(ctx, req.(*Blog_ArticleUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Blog_Message_Elastic_Lower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogloadingBlog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Blog_Message_Elastic_Lower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Blog_Message_Elastic_Lower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Blog_Message_Elastic_Lower(ctx, req.(*BlogloadingBlog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Add_Blog_Reading_Volume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_ArticleUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Add_Blog_Reading_Volume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Add_Blog_Reading_Volume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Add_Blog_Reading_Volume(ctx, req.(*Blog_ArticleUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Blog_Mysql_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_ArticleUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Blog_Mysql_Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Blog_Mysql_Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Blog_Mysql_Message(ctx, req.(*Blog_ArticleUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Search_Blog_ElasticBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAAAA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Search_Blog_ElasticBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Search_Blog_Elastic_blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Search_Blog_ElasticBlog(ctx, req.(*AAAAA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Save_Redis_StorageBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Redis_Storage_Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Save_Redis_StorageBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Save_Redis_Storage_blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Save_Redis_StorageBlog(ctx, req.(*Redis_Storage_Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Delete_El6_MysqlBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Redis_Storage_Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Delete_El6_MysqlBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Delete_El6_Mysql_blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Delete_El6_MysqlBlog(ctx, req.(*Redis_Storage_Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Completely_El6_MysqlBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_ArticleUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Completely_El6_MysqlBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Completely_El6_Mysql_blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Completely_El6_MysqlBlog(ctx, req.(*Blog_ArticleUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Delete_Blog_Mysql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAAA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Delete_Blog_Mysql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Delete_Blog_Mysql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Delete_Blog_Mysql(ctx, req.(*AAAA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Revise_Blog_Process_PlusBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogProcessPlusBlog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Revise_Blog_Process_PlusBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Revise_Blog_Process_Plus_blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Revise_Blog_Process_PlusBlog(ctx, req.(*BlogProcessPlusBlog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Add_Mysql_Blog_Collection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_UserUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Add_Mysql_Blog_Collection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Add_Mysql_Blog_Collection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Add_Mysql_Blog_Collection(ctx, req.(*Blog_UserUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Delete_Mysql_Blog_Collection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_UserUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Delete_Mysql_Blog_Collection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Delete_Mysql_Blog_Collection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Delete_Mysql_Blog_Collection(ctx, req.(*Blog_UserUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Mysql_Blog_Collection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUuid_Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Mysql_Blog_Collection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Mysql_Blog_Collection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Mysql_Blog_Collection(ctx, req.(*UserUuid_Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Revise_Blog_Elastic_Mysql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogBlog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Revise_Blog_Elastic_Mysql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Revise_Blog_Elastic_Mysql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Revise_Blog_Elastic_Mysql(ctx, req.(*BlogBlog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Search_Blog_Label_Elastic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AAAAA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Search_Blog_Label_Elastic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Search_Blog_Label_Elastic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Search_Blog_Label_Elastic(ctx, req.(*AAAAA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Blog_Collection_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_UserUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Blog_Collection_Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Blog_Collection_Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Blog_Collection_Status(ctx, req.(*Blog_UserUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Blog_Manage_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Blog_Manage_All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Blog_Manage_All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Blog_Manage_All(ctx, req.(*Blog_Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Delete_El6_Mysql_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogProcessBlog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Delete_El6_Mysql_Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Delete_El6_Mysql_Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Delete_El6_Mysql_Process(ctx, req.(*BlogProcessBlog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Blog_Manage_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Blog_Manage_Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Blog_Manage_Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Blog_Manage_Name(ctx, req.(*Blog_Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Blog_Manage_Title_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Blog_Manage_Title(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Blog_Manage_Title",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Blog_Manage_Title(ctx, req.(*Blog_Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Blog_Manage_Label_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get_Blog_Manage_Label(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blogs/Get_Blog_Manage_Label",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get_Blog_Manage_Label(ctx, req.(*Blog_Page))
	}
	return interceptor(ctx, in, info, handler)
}

// Blogs_ServiceDesc is the grpc.ServiceDesc for Blogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Blogs",
	HandlerType: (*BlogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add_Blog_Message_Mysql_blog",
			Handler:    _Blogs_Add_Blog_Message_MysqlBlog_Handler,
		},
		{
			MethodName: "Revise_Blog_Process_Mysql_blog",
			Handler:    _Blogs_Revise_Blog_Process_MysqlBlog_Handler,
		},
		{
			MethodName: "Check_Blog_Uuid_Mysql_blog",
			Handler:    _Blogs_Check_Blog_Uuid_MysqlBlog_Handler,
		},
		{
			MethodName: "Get_Blog_Message_Elastic_Top_blog",
			Handler:    _Blogs_Get_Blog_Message_Elastic_TopBlog_Handler,
		},
		{
			MethodName: "Check_Blog_Uuid_Elastic_Blog",
			Handler:    _Blogs_Check_Blog_Uuid_Elastic_Blog_Handler,
		},
		{
			MethodName: "Get_Blog_Message_ArticleUuid",
			Handler:    _Blogs_Get_Blog_Message_ArticleUuid_Handler,
		},
		{
			MethodName: "Get_Blog_Message_Elastic_Lower",
			Handler:    _Blogs_Get_Blog_Message_Elastic_Lower_Handler,
		},
		{
			MethodName: "Add_Blog_Reading_Volume",
			Handler:    _Blogs_Add_Blog_Reading_Volume_Handler,
		},
		{
			MethodName: "Get_Blog_Mysql_Message",
			Handler:    _Blogs_Get_Blog_Mysql_Message_Handler,
		},
		{
			MethodName: "Search_Blog_Elastic_blog",
			Handler:    _Blogs_Search_Blog_ElasticBlog_Handler,
		},
		{
			MethodName: "Save_Redis_Storage_blog",
			Handler:    _Blogs_Save_Redis_StorageBlog_Handler,
		},
		{
			MethodName: "Delete_El6_Mysql_blog",
			Handler:    _Blogs_Delete_El6_MysqlBlog_Handler,
		},
		{
			MethodName: "Completely_El6_Mysql_blog",
			Handler:    _Blogs_Completely_El6_MysqlBlog_Handler,
		},
		{
			MethodName: "Get_Delete_Blog_Mysql",
			Handler:    _Blogs_Get_Delete_Blog_Mysql_Handler,
		},
		{
			MethodName: "Revise_Blog_Process_Plus_blog",
			Handler:    _Blogs_Revise_Blog_Process_PlusBlog_Handler,
		},
		{
			MethodName: "Add_Mysql_Blog_Collection",
			Handler:    _Blogs_Add_Mysql_Blog_Collection_Handler,
		},
		{
			MethodName: "Delete_Mysql_Blog_Collection",
			Handler:    _Blogs_Delete_Mysql_Blog_Collection_Handler,
		},
		{
			MethodName: "Get_Mysql_Blog_Collection",
			Handler:    _Blogs_Get_Mysql_Blog_Collection_Handler,
		},
		{
			MethodName: "Revise_Blog_Elastic_Mysql",
			Handler:    _Blogs_Revise_Blog_Elastic_Mysql_Handler,
		},
		{
			MethodName: "Search_Blog_Label_Elastic",
			Handler:    _Blogs_Search_Blog_Label_Elastic_Handler,
		},
		{
			MethodName: "Get_Blog_Collection_Status",
			Handler:    _Blogs_Get_Blog_Collection_Status_Handler,
		},
		{
			MethodName: "Get_Blog_Manage_All",
			Handler:    _Blogs_Get_Blog_Manage_All_Handler,
		},
		{
			MethodName: "Delete_El6_Mysql_Process",
			Handler:    _Blogs_Delete_El6_Mysql_Process_Handler,
		},
		{
			MethodName: "Get_Blog_Manage_Name",
			Handler:    _Blogs_Get_Blog_Manage_Name_Handler,
		},
		{
			MethodName: "Get_Blog_Manage_Title",
			Handler:    _Blogs_Get_Blog_Manage_Title_Handler,
		},
		{
			MethodName: "Get_Blog_Manage_Label",
			Handler:    _Blogs_Get_Blog_Manage_Label_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}
