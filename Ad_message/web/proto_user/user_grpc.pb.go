// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto_user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	Register_Mailbox_Back(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*Mailbox_Back, error)
	Get_Redis_Storage(ctx context.Context, in *Redis_Storage, opts ...grpc.CallOption) (*Redis_Storage, error)
	Save_Redis_Storage(ctx context.Context, in *Redis_Storage, opts ...grpc.CallOption) (*BACK, error)
	// rpc Renew_User_Message(User_Message)returns(BACK);//更新user数据
	Add_User_Message(ctx context.Context, in *User_Message, opts ...grpc.CallOption) (*BACK, error)
	Delete_Redis_Storage(ctx context.Context, in *Redis_Storage, opts ...grpc.CallOption) (*BACK, error)
	Get_User_Mesaage_Mysql(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*User_Message, error)
	Revise_User_Message_Mysql(ctx context.Context, in *User_Change, opts ...grpc.CallOption) (*BACK, error)
	Get_User_Mailbox(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*Mailbox, error)
	Revise_User_Password_Mysql(ctx context.Context, in *User_Password, opts ...grpc.CallOption) (*BACK, error)
	Revise_User_Status_Mysql(ctx context.Context, in *Mailbox_Back, opts ...grpc.CallOption) (*BACK, error)
	Revise_User_Mailbox_Mysql(ctx context.Context, in *Mailbox_Back, opts ...grpc.CallOption) (*BACK, error)
	Get_User_Password_Mysql(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*Mailbox, error)
	Delete_Mysql_Mailbox(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*BACK, error)
	Get_Register_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error)
	Revise_User_Status(ctx context.Context, in *User_Revise_Status, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Refuse_User_Status(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error)
	Seek_Grade_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error)
	Seek_Name_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error)
	Get_Cancel_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error)
	Get_Blacklist_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error)
	Delete_Blacklist_User(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Add_Blacklist_User(ctx context.Context, in *Blacklist_User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Add_Register_Blacklist(ctx context.Context, in *Blacklist_User, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) Register_Mailbox_Back(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*Mailbox_Back, error) {
	out := new(Mailbox_Back)
	err := c.cc.Invoke(ctx, "/Users/Register_Mailbox_Back", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get_Redis_Storage(ctx context.Context, in *Redis_Storage, opts ...grpc.CallOption) (*Redis_Storage, error) {
	out := new(Redis_Storage)
	err := c.cc.Invoke(ctx, "/Users/Get_Redis_Storage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Save_Redis_Storage(ctx context.Context, in *Redis_Storage, opts ...grpc.CallOption) (*BACK, error) {
	out := new(BACK)
	err := c.cc.Invoke(ctx, "/Users/Save_Redis_Storage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Add_User_Message(ctx context.Context, in *User_Message, opts ...grpc.CallOption) (*BACK, error) {
	out := new(BACK)
	err := c.cc.Invoke(ctx, "/Users/Add_User_Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Delete_Redis_Storage(ctx context.Context, in *Redis_Storage, opts ...grpc.CallOption) (*BACK, error) {
	out := new(BACK)
	err := c.cc.Invoke(ctx, "/Users/Delete_Redis_Storage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get_User_Mesaage_Mysql(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*User_Message, error) {
	out := new(User_Message)
	err := c.cc.Invoke(ctx, "/Users/Get_User_Mesaage_Mysql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Revise_User_Message_Mysql(ctx context.Context, in *User_Change, opts ...grpc.CallOption) (*BACK, error) {
	out := new(BACK)
	err := c.cc.Invoke(ctx, "/Users/Revise_User_Message_Mysql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get_User_Mailbox(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*Mailbox, error) {
	out := new(Mailbox)
	err := c.cc.Invoke(ctx, "/Users/Get_User_Mailbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Revise_User_Password_Mysql(ctx context.Context, in *User_Password, opts ...grpc.CallOption) (*BACK, error) {
	out := new(BACK)
	err := c.cc.Invoke(ctx, "/Users/Revise_User_Password_Mysql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Revise_User_Status_Mysql(ctx context.Context, in *Mailbox_Back, opts ...grpc.CallOption) (*BACK, error) {
	out := new(BACK)
	err := c.cc.Invoke(ctx, "/Users/Revise_User_Status_Mysql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Revise_User_Mailbox_Mysql(ctx context.Context, in *Mailbox_Back, opts ...grpc.CallOption) (*BACK, error) {
	out := new(BACK)
	err := c.cc.Invoke(ctx, "/Users/Revise_User_Mailbox_Mysql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get_User_Password_Mysql(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*Mailbox, error) {
	out := new(Mailbox)
	err := c.cc.Invoke(ctx, "/Users/Get_User_Password_Mysql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Delete_Mysql_Mailbox(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*BACK, error) {
	out := new(BACK)
	err := c.cc.Invoke(ctx, "/Users/Delete_Mysql_Mailbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get_Register_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/Users/Get_Register_User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Revise_User_Status(ctx context.Context, in *User_Revise_Status, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Users/Revise_User_Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Refuse_User_Status(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Users/Refuse_User_Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/Users/Get_User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Seek_Grade_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/Users/Seek_Grade_User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Seek_Name_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/Users/Seek_Name_User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get_Cancel_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/Users/Get_Cancel_User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get_Blacklist_User(ctx context.Context, in *MemberPaging, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/Users/Get_Blacklist_User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Delete_Blacklist_User(ctx context.Context, in *Mailbox, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Users/Delete_Blacklist_User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Add_Blacklist_User(ctx context.Context, in *Blacklist_User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Users/Add_Blacklist_User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Add_Register_Blacklist(ctx context.Context, in *Blacklist_User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Users/Add_Register_Blacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	Register_Mailbox_Back(context.Context, *Mailbox) (*Mailbox_Back, error)
	Get_Redis_Storage(context.Context, *Redis_Storage) (*Redis_Storage, error)
	Save_Redis_Storage(context.Context, *Redis_Storage) (*BACK, error)
	// rpc Renew_User_Message(User_Message)returns(BACK);//更新user数据
	Add_User_Message(context.Context, *User_Message) (*BACK, error)
	Delete_Redis_Storage(context.Context, *Redis_Storage) (*BACK, error)
	Get_User_Mesaage_Mysql(context.Context, *Mailbox) (*User_Message, error)
	Revise_User_Message_Mysql(context.Context, *User_Change) (*BACK, error)
	Get_User_Mailbox(context.Context, *Mailbox) (*Mailbox, error)
	Revise_User_Password_Mysql(context.Context, *User_Password) (*BACK, error)
	Revise_User_Status_Mysql(context.Context, *Mailbox_Back) (*BACK, error)
	Revise_User_Mailbox_Mysql(context.Context, *Mailbox_Back) (*BACK, error)
	Get_User_Password_Mysql(context.Context, *Mailbox) (*Mailbox, error)
	Delete_Mysql_Mailbox(context.Context, *Mailbox) (*BACK, error)
	Get_Register_User(context.Context, *MemberPaging) (*Message, error)
	Revise_User_Status(context.Context, *User_Revise_Status) (*emptypb.Empty, error)
	Refuse_User_Status(context.Context, *Mailbox) (*emptypb.Empty, error)
	Get_User(context.Context, *MemberPaging) (*Message, error)
	Seek_Grade_User(context.Context, *MemberPaging) (*Message, error)
	Seek_Name_User(context.Context, *MemberPaging) (*Message, error)
	Get_Cancel_User(context.Context, *MemberPaging) (*Message, error)
	Get_Blacklist_User(context.Context, *MemberPaging) (*Message, error)
	Delete_Blacklist_User(context.Context, *Mailbox) (*emptypb.Empty, error)
	Add_Blacklist_User(context.Context, *Blacklist_User) (*emptypb.Empty, error)
	Add_Register_Blacklist(context.Context, *Blacklist_User) (*emptypb.Empty, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) Register_Mailbox_Back(context.Context, *Mailbox) (*Mailbox_Back, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register_Mailbox_Back not implemented")
}
func (UnimplementedUsersServer) Get_Redis_Storage(context.Context, *Redis_Storage) (*Redis_Storage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Redis_Storage not implemented")
}
func (UnimplementedUsersServer) Save_Redis_Storage(context.Context, *Redis_Storage) (*BACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save_Redis_Storage not implemented")
}
func (UnimplementedUsersServer) Add_User_Message(context.Context, *User_Message) (*BACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add_User_Message not implemented")
}
func (UnimplementedUsersServer) Delete_Redis_Storage(context.Context, *Redis_Storage) (*BACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete_Redis_Storage not implemented")
}
func (UnimplementedUsersServer) Get_User_Mesaage_Mysql(context.Context, *Mailbox) (*User_Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_User_Mesaage_Mysql not implemented")
}
func (UnimplementedUsersServer) Revise_User_Message_Mysql(context.Context, *User_Change) (*BACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_User_Message_Mysql not implemented")
}
func (UnimplementedUsersServer) Get_User_Mailbox(context.Context, *Mailbox) (*Mailbox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_User_Mailbox not implemented")
}
func (UnimplementedUsersServer) Revise_User_Password_Mysql(context.Context, *User_Password) (*BACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_User_Password_Mysql not implemented")
}
func (UnimplementedUsersServer) Revise_User_Status_Mysql(context.Context, *Mailbox_Back) (*BACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_User_Status_Mysql not implemented")
}
func (UnimplementedUsersServer) Revise_User_Mailbox_Mysql(context.Context, *Mailbox_Back) (*BACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_User_Mailbox_Mysql not implemented")
}
func (UnimplementedUsersServer) Get_User_Password_Mysql(context.Context, *Mailbox) (*Mailbox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_User_Password_Mysql not implemented")
}
func (UnimplementedUsersServer) Delete_Mysql_Mailbox(context.Context, *Mailbox) (*BACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete_Mysql_Mailbox not implemented")
}
func (UnimplementedUsersServer) Get_Register_User(context.Context, *MemberPaging) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Register_User not implemented")
}
func (UnimplementedUsersServer) Revise_User_Status(context.Context, *User_Revise_Status) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_User_Status not implemented")
}
func (UnimplementedUsersServer) Refuse_User_Status(context.Context, *Mailbox) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refuse_User_Status not implemented")
}
func (UnimplementedUsersServer) Get_User(context.Context, *MemberPaging) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_User not implemented")
}
func (UnimplementedUsersServer) Seek_Grade_User(context.Context, *MemberPaging) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seek_Grade_User not implemented")
}
func (UnimplementedUsersServer) Seek_Name_User(context.Context, *MemberPaging) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seek_Name_User not implemented")
}
func (UnimplementedUsersServer) Get_Cancel_User(context.Context, *MemberPaging) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Cancel_User not implemented")
}
func (UnimplementedUsersServer) Get_Blacklist_User(context.Context, *MemberPaging) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_Blacklist_User not implemented")
}
func (UnimplementedUsersServer) Delete_Blacklist_User(context.Context, *Mailbox) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete_Blacklist_User not implemented")
}
func (UnimplementedUsersServer) Add_Blacklist_User(context.Context, *Blacklist_User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add_Blacklist_User not implemented")
}
func (UnimplementedUsersServer) Add_Register_Blacklist(context.Context, *Blacklist_User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add_Register_Blacklist not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_Register_Mailbox_Back_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mailbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Register_Mailbox_Back(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Register_Mailbox_Back",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Register_Mailbox_Back(ctx, req.(*Mailbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_Redis_Storage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Redis_Storage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get_Redis_Storage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Get_Redis_Storage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get_Redis_Storage(ctx, req.(*Redis_Storage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Save_Redis_Storage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Redis_Storage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Save_Redis_Storage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Save_Redis_Storage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Save_Redis_Storage(ctx, req.(*Redis_Storage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Add_User_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Add_User_Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Add_User_Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Add_User_Message(ctx, req.(*User_Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Delete_Redis_Storage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Redis_Storage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Delete_Redis_Storage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Delete_Redis_Storage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Delete_Redis_Storage(ctx, req.(*Redis_Storage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_User_Mesaage_Mysql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mailbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get_User_Mesaage_Mysql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Get_User_Mesaage_Mysql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get_User_Mesaage_Mysql(ctx, req.(*Mailbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Revise_User_Message_Mysql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_Change)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Revise_User_Message_Mysql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Revise_User_Message_Mysql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Revise_User_Message_Mysql(ctx, req.(*User_Change))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_User_Mailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mailbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get_User_Mailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Get_User_Mailbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get_User_Mailbox(ctx, req.(*Mailbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Revise_User_Password_Mysql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_Password)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Revise_User_Password_Mysql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Revise_User_Password_Mysql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Revise_User_Password_Mysql(ctx, req.(*User_Password))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Revise_User_Status_Mysql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mailbox_Back)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Revise_User_Status_Mysql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Revise_User_Status_Mysql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Revise_User_Status_Mysql(ctx, req.(*Mailbox_Back))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Revise_User_Mailbox_Mysql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mailbox_Back)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Revise_User_Mailbox_Mysql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Revise_User_Mailbox_Mysql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Revise_User_Mailbox_Mysql(ctx, req.(*Mailbox_Back))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_User_Password_Mysql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mailbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get_User_Password_Mysql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Get_User_Password_Mysql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get_User_Password_Mysql(ctx, req.(*Mailbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Delete_Mysql_Mailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mailbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Delete_Mysql_Mailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Delete_Mysql_Mailbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Delete_Mysql_Mailbox(ctx, req.(*Mailbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_Register_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get_Register_User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Get_Register_User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get_Register_User(ctx, req.(*MemberPaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Revise_User_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_Revise_Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Revise_User_Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Revise_User_Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Revise_User_Status(ctx, req.(*User_Revise_Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Refuse_User_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mailbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Refuse_User_Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Refuse_User_Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Refuse_User_Status(ctx, req.(*Mailbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get_User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Get_User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get_User(ctx, req.(*MemberPaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Seek_Grade_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Seek_Grade_User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Seek_Grade_User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Seek_Grade_User(ctx, req.(*MemberPaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Seek_Name_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Seek_Name_User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Seek_Name_User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Seek_Name_User(ctx, req.(*MemberPaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_Cancel_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get_Cancel_User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Get_Cancel_User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get_Cancel_User(ctx, req.(*MemberPaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_Blacklist_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get_Blacklist_User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Get_Blacklist_User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get_Blacklist_User(ctx, req.(*MemberPaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Delete_Blacklist_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mailbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Delete_Blacklist_User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Delete_Blacklist_User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Delete_Blacklist_User(ctx, req.(*Mailbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Add_Blacklist_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blacklist_User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Add_Blacklist_User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Add_Blacklist_User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Add_Blacklist_User(ctx, req.(*Blacklist_User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Add_Register_Blacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blacklist_User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Add_Register_Blacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/Add_Register_Blacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Add_Register_Blacklist(ctx, req.(*Blacklist_User))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register_Mailbox_Back",
			Handler:    _Users_Register_Mailbox_Back_Handler,
		},
		{
			MethodName: "Get_Redis_Storage",
			Handler:    _Users_Get_Redis_Storage_Handler,
		},
		{
			MethodName: "Save_Redis_Storage",
			Handler:    _Users_Save_Redis_Storage_Handler,
		},
		{
			MethodName: "Add_User_Message",
			Handler:    _Users_Add_User_Message_Handler,
		},
		{
			MethodName: "Delete_Redis_Storage",
			Handler:    _Users_Delete_Redis_Storage_Handler,
		},
		{
			MethodName: "Get_User_Mesaage_Mysql",
			Handler:    _Users_Get_User_Mesaage_Mysql_Handler,
		},
		{
			MethodName: "Revise_User_Message_Mysql",
			Handler:    _Users_Revise_User_Message_Mysql_Handler,
		},
		{
			MethodName: "Get_User_Mailbox",
			Handler:    _Users_Get_User_Mailbox_Handler,
		},
		{
			MethodName: "Revise_User_Password_Mysql",
			Handler:    _Users_Revise_User_Password_Mysql_Handler,
		},
		{
			MethodName: "Revise_User_Status_Mysql",
			Handler:    _Users_Revise_User_Status_Mysql_Handler,
		},
		{
			MethodName: "Revise_User_Mailbox_Mysql",
			Handler:    _Users_Revise_User_Mailbox_Mysql_Handler,
		},
		{
			MethodName: "Get_User_Password_Mysql",
			Handler:    _Users_Get_User_Password_Mysql_Handler,
		},
		{
			MethodName: "Delete_Mysql_Mailbox",
			Handler:    _Users_Delete_Mysql_Mailbox_Handler,
		},
		{
			MethodName: "Get_Register_User",
			Handler:    _Users_Get_Register_User_Handler,
		},
		{
			MethodName: "Revise_User_Status",
			Handler:    _Users_Revise_User_Status_Handler,
		},
		{
			MethodName: "Refuse_User_Status",
			Handler:    _Users_Refuse_User_Status_Handler,
		},
		{
			MethodName: "Get_User",
			Handler:    _Users_Get_User_Handler,
		},
		{
			MethodName: "Seek_Grade_User",
			Handler:    _Users_Seek_Grade_User_Handler,
		},
		{
			MethodName: "Seek_Name_User",
			Handler:    _Users_Seek_Name_User_Handler,
		},
		{
			MethodName: "Get_Cancel_User",
			Handler:    _Users_Get_Cancel_User_Handler,
		},
		{
			MethodName: "Get_Blacklist_User",
			Handler:    _Users_Get_Blacklist_User_Handler,
		},
		{
			MethodName: "Delete_Blacklist_User",
			Handler:    _Users_Delete_Blacklist_User_Handler,
		},
		{
			MethodName: "Add_Blacklist_User",
			Handler:    _Users_Add_Blacklist_User_Handler,
		},
		{
			MethodName: "Add_Register_Blacklist",
			Handler:    _Users_Add_Register_Blacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
