// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PagemessageClient is the client API for Pagemessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PagemessageClient interface {
	GetMemberMessage(ctx context.Context, in *PageMemberPaging, opts ...grpc.CallOption) (*MessagePage, error)
	GetPrizeMessage(ctx context.Context, in *PageMemberPaging, opts ...grpc.CallOption) (*MessagePage, error)
	GetClubDirectionMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error)
	GetTrainingPersonnel(ctx context.Context, in *PageMemberPaging, opts ...grpc.CallOption) (*MessagePage, error)
	GetTrainingMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error)
	GetTrainingTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error)
	GetAboutUs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error)
	GetLearningStyle(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error)
	GetClubLocation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error)
	Revise_Message(ctx context.Context, in *ReviseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Add_Training_Time(ctx context.Context, in *ReviseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Del_Training_TIme(ctx context.Context, in *DelMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Add_Club_Direction(ctx context.Context, in *ReviseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Del_Club_Direction(ctx context.Context, in *ReviseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Revise_Award_Information(ctx context.Context, in *Prize, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Del_Award_Information(ctx context.Context, in *Prize, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Add_Award_Information(ctx context.Context, in *Prize, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pagemessageClient struct {
	cc grpc.ClientConnInterface
}

func NewPagemessageClient(cc grpc.ClientConnInterface) PagemessageClient {
	return &pagemessageClient{cc}
}

func (c *pagemessageClient) GetMemberMessage(ctx context.Context, in *PageMemberPaging, opts ...grpc.CallOption) (*MessagePage, error) {
	out := new(MessagePage)
	err := c.cc.Invoke(ctx, "/Pagemessage/Get_member_message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) GetPrizeMessage(ctx context.Context, in *PageMemberPaging, opts ...grpc.CallOption) (*MessagePage, error) {
	out := new(MessagePage)
	err := c.cc.Invoke(ctx, "/Pagemessage/Get_prize_message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) GetClubDirectionMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error) {
	out := new(MessagePage)
	err := c.cc.Invoke(ctx, "/Pagemessage/Get_club_direction_message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) GetTrainingPersonnel(ctx context.Context, in *PageMemberPaging, opts ...grpc.CallOption) (*MessagePage, error) {
	out := new(MessagePage)
	err := c.cc.Invoke(ctx, "/Pagemessage/Get_training_personnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) GetTrainingMessage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error) {
	out := new(MessagePage)
	err := c.cc.Invoke(ctx, "/Pagemessage/Get_training_message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) GetTrainingTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error) {
	out := new(MessagePage)
	err := c.cc.Invoke(ctx, "/Pagemessage/Get_training_time", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) GetAboutUs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error) {
	out := new(MessagePage)
	err := c.cc.Invoke(ctx, "/Pagemessage/Get_about_us", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) GetLearningStyle(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error) {
	out := new(MessagePage)
	err := c.cc.Invoke(ctx, "/Pagemessage/Get_learning_style", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) GetClubLocation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagePage, error) {
	out := new(MessagePage)
	err := c.cc.Invoke(ctx, "/Pagemessage/Get_club_location", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) Revise_Message(ctx context.Context, in *ReviseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Pagemessage/Revise_Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) Add_Training_Time(ctx context.Context, in *ReviseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Pagemessage/Add_Training_Time", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) Del_Training_TIme(ctx context.Context, in *DelMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Pagemessage/Del_Training_TIme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) Add_Club_Direction(ctx context.Context, in *ReviseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Pagemessage/Add_Club_Direction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) Del_Club_Direction(ctx context.Context, in *ReviseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Pagemessage/Del_Club_Direction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) Revise_Award_Information(ctx context.Context, in *Prize, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Pagemessage/Revise_Award_Information", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) Del_Award_Information(ctx context.Context, in *Prize, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Pagemessage/Del_Award_Information", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagemessageClient) Add_Award_Information(ctx context.Context, in *Prize, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Pagemessage/Add_Award_Information", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PagemessageServer is the server API for Pagemessage service.
// All implementations must embed UnimplementedPagemessageServer
// for forward compatibility
type PagemessageServer interface {
	GetMemberMessage(context.Context, *PageMemberPaging) (*MessagePage, error)
	GetPrizeMessage(context.Context, *PageMemberPaging) (*MessagePage, error)
	GetClubDirectionMessage(context.Context, *emptypb.Empty) (*MessagePage, error)
	GetTrainingPersonnel(context.Context, *PageMemberPaging) (*MessagePage, error)
	GetTrainingMessage(context.Context, *emptypb.Empty) (*MessagePage, error)
	GetTrainingTime(context.Context, *emptypb.Empty) (*MessagePage, error)
	GetAboutUs(context.Context, *emptypb.Empty) (*MessagePage, error)
	GetLearningStyle(context.Context, *emptypb.Empty) (*MessagePage, error)
	GetClubLocation(context.Context, *emptypb.Empty) (*MessagePage, error)
	Revise_Message(context.Context, *ReviseMessage) (*emptypb.Empty, error)
	Add_Training_Time(context.Context, *ReviseMessage) (*emptypb.Empty, error)
	Del_Training_TIme(context.Context, *DelMessage) (*emptypb.Empty, error)
	Add_Club_Direction(context.Context, *ReviseMessage) (*emptypb.Empty, error)
	Del_Club_Direction(context.Context, *ReviseMessage) (*emptypb.Empty, error)
	Revise_Award_Information(context.Context, *Prize) (*emptypb.Empty, error)
	Del_Award_Information(context.Context, *Prize) (*emptypb.Empty, error)
	Add_Award_Information(context.Context, *Prize) (*emptypb.Empty, error)
	mustEmbedUnimplementedPagemessageServer()
}

// UnimplementedPagemessageServer must be embedded to have forward compatible implementations.
type UnimplementedPagemessageServer struct {
}

func (UnimplementedPagemessageServer) GetMemberMessage(context.Context, *PageMemberPaging) (*MessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberMessage not implemented")
}
func (UnimplementedPagemessageServer) GetPrizeMessage(context.Context, *PageMemberPaging) (*MessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrizeMessage not implemented")
}
func (UnimplementedPagemessageServer) GetClubDirectionMessage(context.Context, *emptypb.Empty) (*MessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubDirectionMessage not implemented")
}
func (UnimplementedPagemessageServer) GetTrainingPersonnel(context.Context, *PageMemberPaging) (*MessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingPersonnel not implemented")
}
func (UnimplementedPagemessageServer) GetTrainingMessage(context.Context, *emptypb.Empty) (*MessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingMessage not implemented")
}
func (UnimplementedPagemessageServer) GetTrainingTime(context.Context, *emptypb.Empty) (*MessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingTime not implemented")
}
func (UnimplementedPagemessageServer) GetAboutUs(context.Context, *emptypb.Empty) (*MessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAboutUs not implemented")
}
func (UnimplementedPagemessageServer) GetLearningStyle(context.Context, *emptypb.Empty) (*MessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLearningStyle not implemented")
}
func (UnimplementedPagemessageServer) GetClubLocation(context.Context, *emptypb.Empty) (*MessagePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubLocation not implemented")
}
func (UnimplementedPagemessageServer) Revise_Message(context.Context, *ReviseMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_Message not implemented")
}
func (UnimplementedPagemessageServer) Add_Training_Time(context.Context, *ReviseMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add_Training_Time not implemented")
}
func (UnimplementedPagemessageServer) Del_Training_TIme(context.Context, *DelMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del_Training_TIme not implemented")
}
func (UnimplementedPagemessageServer) Add_Club_Direction(context.Context, *ReviseMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add_Club_Direction not implemented")
}
func (UnimplementedPagemessageServer) Del_Club_Direction(context.Context, *ReviseMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del_Club_Direction not implemented")
}
func (UnimplementedPagemessageServer) Revise_Award_Information(context.Context, *Prize) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revise_Award_Information not implemented")
}
func (UnimplementedPagemessageServer) Del_Award_Information(context.Context, *Prize) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del_Award_Information not implemented")
}
func (UnimplementedPagemessageServer) Add_Award_Information(context.Context, *Prize) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add_Award_Information not implemented")
}
func (UnimplementedPagemessageServer) mustEmbedUnimplementedPagemessageServer() {}

// UnsafePagemessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PagemessageServer will
// result in compilation errors.
type UnsafePagemessageServer interface {
	mustEmbedUnimplementedPagemessageServer()
}

func RegisterPagemessageServer(s grpc.ServiceRegistrar, srv PagemessageServer) {
	s.RegisterService(&Pagemessage_ServiceDesc, srv)
}

func _Pagemessage_GetMemberMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageMemberPaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).GetMemberMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Get_member_message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).GetMemberMessage(ctx, req.(*PageMemberPaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_GetPrizeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageMemberPaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).GetPrizeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Get_prize_message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).GetPrizeMessage(ctx, req.(*PageMemberPaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_GetClubDirectionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).GetClubDirectionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Get_club_direction_message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).GetClubDirectionMessage(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_GetTrainingPersonnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageMemberPaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).GetTrainingPersonnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Get_training_personnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).GetTrainingPersonnel(ctx, req.(*PageMemberPaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_GetTrainingMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).GetTrainingMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Get_training_message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).GetTrainingMessage(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_GetTrainingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).GetTrainingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Get_training_time",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).GetTrainingTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_GetAboutUs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).GetAboutUs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Get_about_us",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).GetAboutUs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_GetLearningStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).GetLearningStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Get_learning_style",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).GetLearningStyle(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_GetClubLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).GetClubLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Get_club_location",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).GetClubLocation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_Revise_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).Revise_Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Revise_Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).Revise_Message(ctx, req.(*ReviseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_Add_Training_Time_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).Add_Training_Time(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Add_Training_Time",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).Add_Training_Time(ctx, req.(*ReviseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_Del_Training_TIme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).Del_Training_TIme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Del_Training_TIme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).Del_Training_TIme(ctx, req.(*DelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_Add_Club_Direction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).Add_Club_Direction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Add_Club_Direction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).Add_Club_Direction(ctx, req.(*ReviseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_Del_Club_Direction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).Del_Club_Direction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Del_Club_Direction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).Del_Club_Direction(ctx, req.(*ReviseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_Revise_Award_Information_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).Revise_Award_Information(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Revise_Award_Information",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).Revise_Award_Information(ctx, req.(*Prize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_Del_Award_Information_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).Del_Award_Information(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Del_Award_Information",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).Del_Award_Information(ctx, req.(*Prize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pagemessage_Add_Award_Information_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagemessageServer).Add_Award_Information(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pagemessage/Add_Award_Information",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagemessageServer).Add_Award_Information(ctx, req.(*Prize))
	}
	return interceptor(ctx, in, info, handler)
}

// Pagemessage_ServiceDesc is the grpc.ServiceDesc for Pagemessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pagemessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Pagemessage",
	HandlerType: (*PagemessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get_member_message",
			Handler:    _Pagemessage_GetMemberMessage_Handler,
		},
		{
			MethodName: "Get_prize_message",
			Handler:    _Pagemessage_GetPrizeMessage_Handler,
		},
		{
			MethodName: "Get_club_direction_message",
			Handler:    _Pagemessage_GetClubDirectionMessage_Handler,
		},
		{
			MethodName: "Get_training_personnel",
			Handler:    _Pagemessage_GetTrainingPersonnel_Handler,
		},
		{
			MethodName: "Get_training_message",
			Handler:    _Pagemessage_GetTrainingMessage_Handler,
		},
		{
			MethodName: "Get_training_time",
			Handler:    _Pagemessage_GetTrainingTime_Handler,
		},
		{
			MethodName: "Get_about_us",
			Handler:    _Pagemessage_GetAboutUs_Handler,
		},
		{
			MethodName: "Get_learning_style",
			Handler:    _Pagemessage_GetLearningStyle_Handler,
		},
		{
			MethodName: "Get_club_location",
			Handler:    _Pagemessage_GetClubLocation_Handler,
		},
		{
			MethodName: "Revise_Message",
			Handler:    _Pagemessage_Revise_Message_Handler,
		},
		{
			MethodName: "Add_Training_Time",
			Handler:    _Pagemessage_Add_Training_Time_Handler,
		},
		{
			MethodName: "Del_Training_TIme",
			Handler:    _Pagemessage_Del_Training_TIme_Handler,
		},
		{
			MethodName: "Add_Club_Direction",
			Handler:    _Pagemessage_Add_Club_Direction_Handler,
		},
		{
			MethodName: "Del_Club_Direction",
			Handler:    _Pagemessage_Del_Club_Direction_Handler,
		},
		{
			MethodName: "Revise_Award_Information",
			Handler:    _Pagemessage_Revise_Award_Information_Handler,
		},
		{
			MethodName: "Del_Award_Information",
			Handler:    _Pagemessage_Del_Award_Information_Handler,
		},
		{
			MethodName: "Add_Award_Information",
			Handler:    _Pagemessage_Add_Award_Information_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pagemessage.proto",
}
